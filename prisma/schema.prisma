// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  name                          String?
  email                         String?   @unique
  phone                         String?   @unique
  password                      String?
  otp                           String?
  otpExpires                    DateTime?
  otpVerificationDeadline       DateTime?
  emailVerified                 DateTime?
  phoneVerified                 DateTime?
  image                         String?
  emailVerificationToken        String?   @unique
  emailVerificationTokenExpires DateTime?
  accounts                      Account[]
  sessions                      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product Catalog Models

model Feature {
  id        String  @id @default(cuid())
  name      String
  included  Boolean
  packageId String
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
}

model Subcategory {
  id         String    @id @default(cuid())
  name       String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  packages   Package[]

  @@unique([categoryId, name])
  @@index([categoryId])
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  icon          String
  subcategories Subcategory[]
  packages      Package[]     @relation("CategoryToPackage") // Added relation name here
  addons        Addon[]
}

model Addon {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text // Made optional
  price       Decimal  @db.Decimal(10, 2)
  image       String?  @db.Text // Made optional
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, name])
  @@index([categoryId])
}

model Package {
  id            String      @id @default(cuid())
  name          String      @unique // Assuming package names are globally unique
  description   String      @db.Text
  price         Decimal     @db.Decimal(10, 2)
  image         String      @db.Text
  categoryId    String
  category      Category    @relation("CategoryToPackage", fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  subcategoryId String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  popular       Boolean?
  bgColor       String?
  features      Feature[]

  @@index([categoryId])
  @@index([subcategoryId])
}
