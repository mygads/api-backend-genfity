// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  name                          String?
  email                         String?   @unique
  phone                         String?   @unique
  password                      String?
  otp                           String?
  otpExpires                    DateTime?
  otpVerificationDeadline       DateTime?
  emailVerified                 DateTime?
  phoneVerified                 DateTime?
  image                         String?
  emailVerificationToken        String?   @unique
  emailVerificationTokenExpires DateTime?
  role                          String    @default("customer")
  accounts                      Account[]
  sessions                      Session[]
  whatsAppSessions              WhatsAppSession[]
  transactions                  Transaction[]
  whatsappApiTransactions       WhatsappApiTransaction[]
  whatsappApiServices           WhatsappApiService[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product Catalog Models

model Feature {
  id        String  @id @default(cuid())
  name_en   String
  name_id   String
  included  Boolean
  packageId String
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
}

model Subcategory {
  id         String    @id @default(cuid())
  name_en    String
  name_id    String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  packages   Package[]

  @@unique([categoryId, name_en])
  @@unique([categoryId, name_id])
  @@index([categoryId])
}

model Category {
  id            String        @id @default(cuid())
  name_en       String
  name_id       String
  icon          String
  subcategories Subcategory[]
  packages      Package[]     @relation("CategoryToPackage")
  addons        Addon[]
}

model Addon {
  id             String   @id @default(cuid())
  name_en        String
  name_id        String
  description_en String?  @db.Text
  description_id String?  @db.Text
  price_idr      Decimal  @db.Decimal(10, 2)
  price_usd      Decimal  @db.Decimal(10, 2)
  image          String?  @db.Text
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@unique([categoryId, name_en])
  @@unique([categoryId, name_id])
  @@index([categoryId])
}

model Package {
  id              String      @id @default(cuid())
  name_en         String
  name_id         String
  description_en  String      @db.Text
  description_id  String      @db.Text
  price_idr       Decimal     @db.Decimal(10, 2)
  price_usd       Decimal     @db.Decimal(10, 2)
  image           String      @db.Text
  categoryId      String
  category        Category    @relation("CategoryToPackage", fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  subcategoryId   String
  subcategory     Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  popular         Boolean?
  bgColor         String?
  features        Feature[]
  transactions    Transaction[]

  @@index([categoryId])
  @@index([subcategoryId])
}

model WhatsAppSession {
  id             String   @id @default(cuid())
  sessionId      String   @unique
  userId         String
  status         String
  qr             String?
  isNotification Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  aiConfig       Json?
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  packageId       String?
  addonId         String?
  paymentId       String? // foreign key ke Payment
  transactionDate DateTime @default(now())
  startDate       DateTime
  endDate         DateTime
  status          String   // e.g. pending, paid, expired, cancelled
  referenceLink   String?  // link referensi/gambar dari customer
  user            User     @relation(fields: [userId], references: [id])
  package         Package? @relation(fields: [packageId], references: [id])
  addon           Addon?   @relation(fields: [addonId], references: [id])
  payment         Payment? @relation("TransactionPayment")
}

model Payment {
  id            String   @id @default(cuid())
  transaction   Transaction? @relation("TransactionPayment", fields: [transactionId], references: [id])
  transactionId String?  @unique
  amount        Decimal
  method        String   // e.g. "midtrans", "xendit", "manual"
  status        String   // e.g. "pending", "paid", "failed"
  paymentDate   DateTime?
}

// WhatsApp API Service Subscription Models
model WhatsappApiPackage {
  id          String   @id @default(cuid())
  name        String
  description String?
  priceMonth  Int
  priceYear   Int
  maxSession  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  services    WhatsappApiService[]
  transactions WhatsappApiTransaction[]
}

model WhatsappApiTransaction {
  id         String   @id @default(cuid())
  userId     String
  packageId  String
  duration   String   // 'month' | 'year'
  price      Int
  status     String   // 'pending' | 'paid' | 'failed'
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  package    WhatsappApiPackage @relation(fields: [packageId], references: [id])
}

model WhatsappApiService {
  id         String   @id @default(cuid())
  userId     String
  packageId  String
  expiredAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  package    WhatsappApiPackage @relation(fields: [packageId], references: [id])
  // sessions   WhatsAppSession[] // Uncomment if you want to relate sessions here
}
